import 'package:flutter/material.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:librarix/Models/borrow.dart';

class BookReservationList extends StatefulWidget {
  @override
  _BookReservationListState createState() => _BookReservationListState();
}

class _BookReservationListState extends State<BookReservationList> {
  List<Borrow> activeReserve = [];
  final GlobalKey<RefreshIndicatorState> _refreshIndicatorKey =
      new GlobalKey<RefreshIndicatorState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: 
    //   RefreshIndicator(
    // key: _refreshIndicatorKey,
    // onRefresh: _refresh,
    // child: ListView(children: [
    //  
    // ])),
      StreamBuilder<List<Borrow>>(
        stream: getBorrowedWithDocIdOf("BorrowStatus", "Reserved"),
        builder: (BuildContext context, AsyncSnapshot<List<Borrow>> snapshot) {
          if (snapshot.hasData) {
            activeReserve = snapshot.data.toList();
            return ListView.builder(
                itemCount: activeReserve.length,
                itemBuilder: (_, index) {
                  return Column(
                    children: <Widget>[
                      Container(
                        child: Card(
                          child: Padding(
                            padding: const EdgeInsets.all(14.0),
                            child: Column(
                              children: [
                                Padding(
                                  padding: const EdgeInsets.only(
                                      top: 8.0, bottom: 4.0),
                                  child: Row(
                                    children: [
                                      Text(
                                        activeReserve[index].bookTitle,
                                        style: TextStyle(
                                            fontWeight: FontWeight.bold,
                                            fontSize: 23),
                                      ),
                                      Spacer(),
                                      Column(
                                        children: actionButtons(index),
                                      ),
                                    ],
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(
                                      top: 8.0, bottom: 4.0),
                                  child: Row(
                                    children: [
                                      Text(activeReserve[index].userId,
                                          style: TextStyle(fontSize: 22)),
                                    ],
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(
                                      top: 8.0, bottom: 4.0),
                                  child: Row(
                                    children: [
                                      Text(
                                          activeReserve[index].borrowedDate +
                                              " - " +
                                              activeReserve[index].returnedDate,
                                          style: TextStyle(fontSize: 20)),
                                    ],
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(
                                      top: 8.0, bottom: 4.0),
                                  child: Row(
                                    children: [
                                      Text(activeReserve[index].status,
                                          style: TextStyle(fontSize: 20)),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      )
                    ],
                  );
                });
          }
          return SpinKitWave(
            color: Theme.of(context).accentColor,
          );
        },
      ),
    );
  }

  List<Widget> actionButtons(int index) {
    List<Widget> buttons = [];
    buttons.addAll([
      Row(mainAxisAlignment: MainAxisAlignment.end, children: <Widget>[
        IconButton(
          icon: Icon(Icons.delete),
          onPressed: () {
            return showDialog(
                context: context,
                barrierDismissible: false,
                builder: (BuildContext context) {
                  return AlertDialog(
                    title: Text(
                      'Cancel Reserved Book',
                    ),
                    content: SingleChildScrollView(
                      child: ListBody(
                        children: <Widget>[
                          Text("Wanted to cancel reserved book?")
                        ],
                      ),
                    ),
                    actions: <Widget>[
                      TextButton(
                        child: Text("Yes"),
                        onPressed: () async {
                          updateCancelStatus(activeReserve[index].borrowedId);
                          Navigator.of(context).pop();
                        },
                      ),
                      TextButton(
                        child: Text("No"),
                        onPressed: () {
                          Navigator.of(context).pop();
                        },
                      ),
                    ],
                  );
                });
          },
        ),
        Container(
          width: 15.0,
        ),
        IconButton(
          icon: Icon(Icons.update),
          onPressed: () {
            return showDialog(
                context: context,
                barrierDismissible: false,
                builder: (BuildContext context) {
                  return AlertDialog(
                    title: Text(
                      'Update Reserved Book',
                    ),
                    content: SingleChildScrollView(
                      child: ListBody(
                        children: <Widget>[Text("Borrow reserved book?")],
                      ),
                    ),
                    actions: <Widget>[
                      TextButton(
                        child: Text("Yes"),
                        onPressed: () async {
                          updateBorrowStatus(activeReserve[index].borrowedId);
                          Navigator.of(context).pop();
                        },
                      ),
                      TextButton(
                        child: Text("No"),
                        onPressed: () {
                          Navigator.of(context).pop();
                        },
                      ),
                    ],
                  );
                });
          },
        ),
      ]),
    ]);
    return buttons;
  }
}

??????????????????????????????????????

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:librarix/Models/borrow.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';

class BookReservationList extends StatefulWidget {
  @override
  _BookReservationListState createState() => _BookReservationListState();
}

class _BookReservationListState extends State<BookReservationList> {
  List<Borrow> activeReserve = [];
  RefreshController _refreshController =
      RefreshController(initialRefresh: false);

  void _onRefresh() async {
    // monitor network fetch
    await Future.delayed(Duration(milliseconds: 1000));
    // if failed,use refreshFailed()
    _refreshController.refreshCompleted();
  }

  void _onLoading() async {
    // monitor network fetch
    await Future.delayed(Duration(milliseconds: 1000));
    // if failed,use loadFailed(),if no data return,use LoadNodata()
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SmartRefresher(
        enablePullDown: true,
        enablePullUp: true,
        header: WaterDropHeader(),
        footer: CustomFooter(
          builder: (BuildContext context, LoadStatus mode) {
            Widget body;
            if (mode == LoadStatus.idle) {
              body = Text("pull up load");
            } else if (mode == LoadStatus.loading) {
              body = CupertinoActivityIndicator();
            } else if (mode == LoadStatus.failed) {
              body = Text("Load Failed!Click retry!");
            } else if (mode == LoadStatus.canLoading) {
              body = Text("release to load more");
            } else {
              body = Text("No more Data");
            }
            return Container(
              height: 55.0,
              child: Center(child: body),
            );
          },
        ),
        controller: _refreshController,
        onRefresh: _onRefresh,
        onLoading: _onLoading,
        child: StreamBuilder<List<Borrow>>(
          stream: getBorrowedWithDocIdOf("BorrowStatus", "Reserved"),
          builder:
              (BuildContext context, AsyncSnapshot<List<Borrow>> snapshot) {
            if (snapshot.hasData) {
              activeReserve = snapshot.data.toList();
              return ListView.builder(
                  itemCount: activeReserve.length,
                  itemBuilder: (_, index) {
                    return Column(
                      children: <Widget>[
                        Container(
                          child: Card(
                            child: Padding(
                              padding: const EdgeInsets.all(14.0),
                              child: Column(
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.only(
                                        top: 8.0, bottom: 4.0),
                                    child: Row(
                                      children: [
                                        Text(
                                          activeReserve[index].bookTitle,
                                          style: TextStyle(
                                              fontWeight: FontWeight.bold,
                                              fontSize: 23),
                                        ),
                                        Spacer(),
                                        Column(
                                          children: actionButtons(index),
                                        ),
                                      ],
                                    ),
                                  ),
                                  Padding(
                                    padding: const EdgeInsets.only(
                                        top: 8.0, bottom: 4.0),
                                    child: Row(
                                      children: [
                                        Text(activeReserve[index].userId,
                                            style: TextStyle(fontSize: 22)),
                                      ],
                                    ),
                                  ),
                                  Padding(
                                    padding: const EdgeInsets.only(
                                        top: 8.0, bottom: 4.0),
                                    child: Row(
                                      children: [
                                        Text(
                                            activeReserve[index].borrowedDate +
                                                " - " +
                                                activeReserve[index]
                                                    .returnedDate,
                                            style: TextStyle(fontSize: 20)),
                                      ],
                                    ),
                                  ),
                                  Padding(
                                    padding: const EdgeInsets.only(
                                        top: 8.0, bottom: 4.0),
                                    child: Row(
                                      children: [
                                        Text(activeReserve[index].status,
                                            style: TextStyle(fontSize: 20)),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        )
                      ],
                    );
                  });
            }
            return SpinKitWave(
              color: Theme.of(context).accentColor,
            );
          },
        ),
      ),
    );
  }

  List<Widget> actionButtons(int index) {
    List<Widget> buttons = [];
    buttons.addAll([
      Row(mainAxisAlignment: MainAxisAlignment.end, children: <Widget>[
        IconButton(
          icon: Icon(Icons.delete),
          onPressed: () {
            return showDialog(
                context: context,
                barrierDismissible: false,
                builder: (BuildContext context) {
                  return AlertDialog(
                    title: Text(
                      'Cancel Reserved Book',
                    ),
                    content: SingleChildScrollView(
                      child: ListBody(
                        children: <Widget>[
                          Text("Wanted to cancel reserved book?")
                        ],
                      ),
                    ),
                    actions: <Widget>[
                      TextButton(
                        child: Text("Yes"),
                        onPressed: () async {
                          updateCancelStatus(activeReserve[index].borrowedId);
                          Navigator.of(context).pop();
                        },
                      ),
                      TextButton(
                        child: Text("No"),
                        onPressed: () {
                          Navigator.of(context).pop();
                        },
                      ),
                    ],
                  );
                });
          },
        ),
        Container(
          width: 15.0,
        ),
        IconButton(
          icon: Icon(Icons.update),
          onPressed: () {
            return showDialog(
                context: context,
                barrierDismissible: false,
                builder: (BuildContext context) {
                  return AlertDialog(
                    title: Text(
                      'Update Reserved Book',
                    ),
                    content: SingleChildScrollView(
                      child: ListBody(
                        children: <Widget>[Text("Borrow reserved book?")],
                      ),
                    ),
                    actions: <Widget>[
                      TextButton(
                        child: Text("Yes"),
                        onPressed: () async {
                          updateBorrowStatus(activeReserve[index].borrowedId);
                          Navigator.of(context).pop();
                        },
                      ),
                      TextButton(
                        child: Text("No"),
                        onPressed: () {
                          Navigator.of(context).pop();
                        },
                      ),
                    ],
                  );
                });
          },
        ),
      ]),
    ]);
    return buttons;
  }
}


/////origin
import 'package:flutter/material.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:librarix/Models/borrow.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';

class BookReservationList extends StatefulWidget {
  @override
  _BookReservationListState createState() => _BookReservationListState();
}

class _BookReservationListState extends State<BookReservationList> {
  List<Borrow> activeReserve = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: StreamBuilder<List<Borrow>>(
        stream: getBorrowedWithDocIdOf("BorrowStatus", "Reserved"),
        builder: (BuildContext context, AsyncSnapshot<List<Borrow>> snapshot) {
          if (snapshot.hasData) {
            activeReserve = snapshot.data.toList();
            return ListView.builder(
                itemCount: activeReserve.length,
                itemBuilder: (_, index) {
                  return Column(
                    children: <Widget>[
                      Container(
                        child: Card(
                          child: Padding(
                            padding: const EdgeInsets.all(14.0),
                            child: Column(
                              children: [
                                Padding(
                                  padding: const EdgeInsets.only(
                                      top: 8.0, bottom: 4.0),
                                  child: Row(
                                    children: [
                                      Text(
                                        activeReserve[index].bookTitle,
                                        style: TextStyle(
                                            fontWeight: FontWeight.bold,
                                            fontSize: 23),
                                      ),
                                      Spacer(),
                                      Column(
                                        children: actionButtons(index),
                                      ),
                                    ],
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(
                                      top: 8.0, bottom: 4.0),
                                  child: Row(
                                    children: [
                                      Text(activeReserve[index].userId,
                                          style: TextStyle(fontSize: 22)),
                                    ],
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(
                                      top: 8.0, bottom: 4.0),
                                  child: Row(
                                    children: [
                                      Text(
                                          activeReserve[index].borrowedDate +
                                              " - " +
                                              activeReserve[index].returnedDate,
                                          style: TextStyle(fontSize: 20)),
                                    ],
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(
                                      top: 8.0, bottom: 4.0),
                                  child: Row(
                                    children: [
                                      Text(activeReserve[index].status,
                                          style: TextStyle(fontSize: 20)),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      )
                    ],
                  );
                });
          }
          return SpinKitWave(
            color: Theme.of(context).accentColor,
          );
        },
      ),
    );
  }

  List<Widget> actionButtons(int index) {
    List<Widget> buttons = [];
    buttons.addAll([
      Row(mainAxisAlignment: MainAxisAlignment.end, children: <Widget>[
        IconButton(
          icon: Icon(Icons.delete),
          onPressed: () {
            return showDialog(
                context: context,
                barrierDismissible: false,
                builder: (BuildContext context) {
                  return AlertDialog(
                    title: Text(
                      'Cancel Reserved Book',
                    ),
                    content: SingleChildScrollView(
                      child: ListBody(
                        children: <Widget>[
                          Text("Wanted to cancel reserved book?")
                        ],
                      ),
                    ),
                    actions: <Widget>[
                      TextButton(
                        child: Text("Yes"),
                        onPressed: () async {
                          updateCancelStatus(activeReserve[index].borrowedId);
                          Navigator.of(context).pop();
                        },
                      ),
                      TextButton(
                        child: Text("No"),
                        onPressed: () {
                          Navigator.of(context).pop();
                        },
                      ),
                    ],
                  );
                });
          },
        ),
        Container(
          width: 15.0,
        ),
        IconButton(
          icon: Icon(Icons.update),
          onPressed: () {
            return showDialog(
                context: context,
                barrierDismissible: false,
                builder: (BuildContext context) {
                  return AlertDialog(
                    title: Text(
                      'Update Reserved Book',
                    ),
                    content: SingleChildScrollView(
                      child: ListBody(
                        children: <Widget>[Text("Borrow reserved book?")],
                      ),
                    ),
                    actions: <Widget>[
                      TextButton(
                        child: Text("Yes"),
                        onPressed: () async {
                          updateBorrowStatus(activeReserve[index].borrowedId);
                          Navigator.of(context).pop();
                        },
                      ),
                      TextButton(
                        child: Text("No"),
                        onPressed: () {
                          Navigator.of(context).pop();
                        },
                      ),
                    ],
                  );
                });
          },
        ),
      ]),
    ]);
    return buttons;
  }
}




import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import '../../../Models/librarian.dart';
import 'librarian_management_detail.dart';

class LibrarianManagement extends StatefulWidget {
  @override
  _LibrarianManagementState createState() => _LibrarianManagementState();
}

class _LibrarianManagementState extends State<LibrarianManagement> {
  final List<Librarian> myLibrarian = [];

  CollectionReference librarianDb =
      FirebaseFirestore.instance.collection("User");

  navigateToLibrarianManagementDetail(DocumentSnapshot librarian) {
    Navigator.push(
        context,
        MaterialPageRoute(
            builder: (context) =>
                LibrarianManagementDetail(librarian: librarian)));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Librarian Management"),
      ),
      body: Container(
        child: FutureBuilder<List<String>>(
            future: librarianData(),
            builder: (BuildContext context, AsyncSnapshot<List<String>> docId) {
              if (docId.hasData) {
                return FutureBuilder<List<Librarian>>(
                    future: getLibrarianData(docId.data),
                    builder: (BuildContext context,
                        AsyncSnapshot<List<Librarian>> snapshot) {
                      if (snapshot.hasData) {
                        return ListView.builder(
                          itemCount: snapshot.data.length,
                          itemBuilder: (BuildContext context, int index) {
                            return Column(
                              children: [
                                Container(
                                  child: Padding(
                                    padding: const EdgeInsets.all(5),
                                    child: Column(
                                      children: <Widget>[
                                        Card(
                                          child: ListTile(
                                            title: Text(
                                              snapshot.data[index].name,
                                              style: TextStyle(
                                                fontWeight: FontWeight.bold,
                                                fontSize: 20,
                                              ),
                                            ),
                                            subtitle: Row(
                                              children: <Widget>[
                                                Expanded(
                                                    child: Padding(
                                                  padding:
                                                      EdgeInsets.only(top: 5),
                                                  child: Text(
                                                    snapshot.data[index].userId,
                                                    style:
                                                        TextStyle(fontSize: 18),
                                                  ),
                                                )),
                                              ],
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                )
                              ],
                            );
                          },
                        );
                      }
                      return SpinKitWave(
                        color: Theme.of(context).accentColor,
                      );
                    });
              }
              return Center(
                  child: SpinKitWave(
                color: Theme.of(context).accentColor,
              ));
            }),
      ),
    );
  }
}
